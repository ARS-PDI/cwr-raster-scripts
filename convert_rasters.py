# Converts all GeoTIFF raster datasets existing in a root directory to MRFs

import os
import sys

import arcpy

from map_rasters import stdize


def get_output_raster(file):
    img_type_map = {
        'ersEx_ecos': 'ex_eco_gaps.tif',
        'ersIn_ecos': 'in_eco_gaps.tif',
        'ga50': 'ex_coll.mrf',
        'grsEx': 'ex_geo_gaps.mrf',
        'grsIn': 'in_geo_gaps.mrf',
        'median': 'distribution.mrf'
    }

    for key in img_type_map:
        if key in file:
            raster_name = stdize(file)
            raster_name = raster_name.split(f'_{key}')[0]
            img_type = img_type_map[key]

            return f'{raster_name}_{img_type}'

    raise RuntimeError(f'Unknown image type: {file}')


def convert_raster(input_dir, output_dir):
    """
    Recursive function that converts all raster datasets under an input directory
    into an output folder
    """
    pixel_t = '8_BIT_UNSIGNED'
    nodata_val = 255  # max unsigned 8-bit val

    for file in os.listdir(input_dir):
        if file.endswith('.tif'):
            output_rast = get_output_raster(file)

            print('Converting', os.path.join(input_dir, file))
            try:
                arcpy.CopyRaster_management(
                    in_raster=os.path.join(input_dir, file),
                    out_rasterdataset=os.path.join(output_dir, output_rast),
                    background_value=nodata_val,
                    nodata_value=nodata_val,
                    pixel_type=pixel_t,
                    format='MRF',
                    transform='NONE'
                )
            except KeyboardInterrupt:
                exit()
            except:
                pass
        elif os.path.isdir(os.path.join(input_dir, file)):
            try:
                os.mkdir(os.path.join(output_dir, file))
            except FileExistsError:
                pass

            convert_raster(os.path.join(input_dir, file),
                           os.path.join(output_dir, file))


def checkup(input_dir, output_dir, no_match):
    """
    Double checks that for every TIF there is a corresponding MRF in all the root
    directory's subdirectories
    """
    for file in os.listdir(input_dir):
        if '__thrsld' in file or 'narea_areakm2' in file:
            continue
        elif 'ga50' in file:
            file = file.replace('ga50', f'{os.path.basename(input_dir)}_ga50')
        elif '_median' in file:
            file = file.replace('spdist_thrsld_median',
                                f'{os.path.basename(input_dir)}_spdist_thrsld_median')

        if file.endswith('.tif'):
            if file.replace('.tif', '.mrf.aux.xml') not in os.listdir(output_dir):
                no_match.append(os.path.join(input_dir, file))
        elif os.path.isdir(os.path.join(input_dir, file)):
            checkup(os.path.join(input_dir, file),
                    os.path.join(output_dir, file), no_match)


def cleanup(input_dir):
    """
    Cleans up unnecessary metadata XML files generated by arcpy.CopyRaster function
    Runs from the root directory
    """
    for file in os.listdir(input_dir):
        if file.endswith('.mrf.xml'):
            os.remove(os.path.join(input_dir, file))
        elif os.path.isdir(os.path.join(input_dir, file)):
            cleanup(os.path.join(input_dir, file))


def raise_os_error():
    raise OSError(
        'Usage: python3 convert_rasters.py [input folder] [output folder]')


if __name__ == "__main__":
    if len(sys.argv) != 3:
        raise_os_error()

    input_dir = sys.argv[1]
    output_dir = sys.argv[2]

    if not os.path.isdir(input_dir) or not os.path.isdir(output_dir):
        raise_os_error()

    arcpy.env.compression = 'LERC 0'
    arcpy.env.outputCoordinateSystem = arcpy.SpatialReference(
        'WGS 1984 UTM Zone 14N')
    arcpy.env.rasterStatistics = 'STATISTICS 1 1'
    arcpy.env.overwriteOutput = False

    convert_raster(input_dir, output_dir)
    print('Finished converting')

    no_match = []
    checkup(input_dir, output_dir, no_match)

    if no_match:
        print('The following rasters do not have a match:')
        for raster in no_match:
            print(raster)
    else:
        print('All TIFs have a matching MRF')

    cleanup(output_dir)
    print('Finished cleaning up metadata files')
